name: aioipfs-build

on:
  push:
    branches: [ master, devel, ci, kubo ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        flake8 aioipfs tests --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Fetch kubo (win)
      uses: engineerd/configurator@v0.0.8
      if: startsWith(matrix.os, 'windows')
      with:
        name: ipfs.exe
        url: "https://dist.ipfs.tech/kubo/v0.17.0/kubo_v0.17.0_windows-amd64.zip"
        pathInArchive: "kubo/ipfs.exe"

    - name: Fetch kubo (linux)
      uses: engineerd/configurator@v0.0.8
      if: startsWith(matrix.os, 'ubuntu')
      with:
        name: ipfs
        url: "https://dist.ipfs.tech/kubo/v0.17.0/kubo_v0.17.0_linux-amd64.tar.gz"
        pathInArchive: "kubo/ipfs"

    - name: Fetch kubo (macos)
      uses: engineerd/configurator@v0.0.8
      if: startsWith(matrix.os, 'macos')
      with:
        name: ipfs
        url: "https://dist.ipfs.tech/kubo/v0.17.0/kubo_v0.17.0_darwin-amd64.tar.gz"
        pathInArchive: "kubo/ipfs"

    - name: Test with pytest
      run: |
        pytest -v -s tests

    - name: Build wheel
      run: |
        python setup.py sdist bdist_wheel

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Build wheel
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -r requirements.txt
        python setup.py sdist bdist_wheel

    - name: Upload to PyPI
      if: contains(toJson(github.event.commits), '[pypi-deploy]') == true
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        pip install twine
        twine upload dist/*
